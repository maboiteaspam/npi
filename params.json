{"name":"Npi","tagline":"node project init","body":"# npi\r\n\r\nNode Project Init. A bit more than `npm init -y`.\r\n\r\n## Install\r\n\r\n    npm i maboiteaspam/npi -g\r\n\r\n## Usage\r\n\r\n      npi to init a node project.\r\n\r\n      Usage\r\n         npi [module1 module2]\r\n         npi [opts] -- [module1 module2]\r\n\r\n      Options\r\n         -v             verbose\r\n         -h             show help\r\n         -b             add bin.js\r\n         --explicit     invoke rvagg/node-explicit --yes.\r\n\r\n     Examples\r\n         npi debug minimist multiline\r\n         npi -b -- debug minimist multiline\r\n         npi -v -- debug minimist multiline\r\n\r\n         npi --explicit\r\n         npi -h\r\n\r\n## Expected result\r\n\r\nA minimal bunch of files to get on work, cooked just for you.\r\n\r\n```\r\n - node_modules/\r\n - .gitignore\r\n - index.js\r\n - playground.js\r\n - package.json\r\n - README.md\r\n```\r\n\r\nFollowing `package.json` fields are updated with your input,\r\n\r\n- description\r\n- licence\r\n- keyword\r\n\r\nThe resulting `package.json` provide a set of script,\r\n\r\n#### npm run patch\r\n\r\nTo increase __patch__ number of your package revision.\r\n\r\n#### npm run minor\r\n\r\nTo increase __minor__ number of your package revision.\r\n\r\n#### npm run major\r\n\r\nTo increase __major__ number of your package revision.\r\n\r\n#### npm run dcheck\r\n\r\nCheck your dependencies status,\r\nupgrade tham if they are outdated.\r\nunder the hood, its `npm outdated --depth=0`.\r\n\r\n__________\r\n\r\nThe reason of this workflow is to enforce a better usage of `semver`.\r\n\r\nPlease check more about it at https://github.com/rvagg/npm-explicit-deps\r\n\r\nRead also about `npm version` https://docs.npmjs.com/cli/version\r\n\r\nFinally, you can take advantage of `preversion` and `version` npm scripts to\r\ninvoke build and test frameworks.\r\n\r\n### Complete your workflow\r\n\r\nTo go further you can check about those repo\r\n\r\n- https://github.com/commitizen/cz-cli\r\n- https://github.com/bahmutov/npm-module-checklist\r\n\r\nThere s also plenty of grunt, gulp and other modules if you like.\r\n\r\n## Operations Flow\r\n\r\n#### For humans only,\r\n\r\n- npm init --yes\r\n- ask you about module `description`\r\n- ask you about module `keywords` (space delimited)\r\n- ask you to choose a `licence`\r\n- ask you about module `dependencies`, unless provided previously (space delimited)\r\n- ask you about module `dev-dependencies` (space delimited)\r\n- generate your files\r\n- npm i [your dependencies]\r\n- npm i [your dev-dependencies]\r\n- fix various things in the `package.json` file, for lazy people\r\n- git init\r\n- git add <generated files only>\r\n- git commit -m 'npi:version'\r\n\r\n#### Everyone else,\r\n\r\n```js\r\nvar ignored = [\r\n  'node_modules/',\r\n  'npm-debug.log'\r\n];\r\n\r\nvar templateVars = {\r\n  name        : path.basename(process.cwd()),\r\n  description : \"Description of the module.\",\r\n  ignored     : ignored,\r\n  modules     : argv['_']\r\n};\r\n\r\nnpi\r\n  // npm init\r\n  .pipe(spawn('npm', ['init', '--yes']))\r\n  .pipe(bubble('message',\r\n    {message: 'file', 'body':'package.json'}))\r\n\r\n  // gather user input\r\n  .pipe(input('Input the module\\'s description :',\r\n    templateVars, 'description'))\r\n  .pipe(input('Input the module\\'s keywords :',\r\n    templateVars, 'keywords'))\r\n  .pipe(choose('Please choose a license :',\r\n    templateVars, 'license'))\r\n  .pipe( !argv['_'].length\r\n    ? input('Input the module\\'s dependencies :',\r\n    templateVars, 'dependencies')\r\n    : streamMsger('skip') )\r\n  .pipe(input('Input the module\\'s devDep\\'s :',\r\n    templateVars, 'devDependencies'))\r\n\r\n   //generate templates\r\n  .pipe(genTemplate(tplPath, 'README.md'    , templateVars))\r\n  .pipe(genTemplate(tplPath, 'playground.js', templateVars))\r\n  .pipe(genTemplate(tplPath, 'index.js'     , templateVars))\r\n  .pipe(genTemplate(tplPath, '.gitignore'   , templateVars))\r\n  .pipe( argv.b\r\n    ? genTemplate(tplPath,  'bin.js'        , templateVars)\r\n    : streamMsger('skip') )\r\n\r\n  // npm module install\r\n  .pipe(spawn('npm', function (){\r\n    var modules = trim(templateVars.dependencies).split(/\\s/);\r\n    if (!modules.length || !modules[0].length) return false;\r\n    return ['i'].concat(modules).concat('--save');\r\n  }))\r\n  .pipe(spawn('npm', function (){\r\n    var modules = trim(templateVars.devDependencies).split(/\\s/);\r\n    if (!modules.length || !modules[0].length) return false;\r\n    return ['i'].concat(modules).concat('--save-dev');\r\n  }))\r\n\r\n  // fix package.json file\r\n  .pipe(updatePkg('package.json', function () {\r\n\r\n    return {\r\n      scripts : {\r\n        \"dcheck\"      : \"npm outdated --depth=0\",\r\n        \"patch\"       : \"npm version patch -m \\\"patch %s\\\"\",\r\n        \"minor\"       : \"npm version minor -m \\\"minor %s\\\"\",\r\n        \"major\"       : \"npm version major -m \\\"major %s\\\"\",\r\n        \"preversion\"  : \"echo \\\"npm test: not defined\\\" && npi --explicit\",\r\n        \"version\"     : \"echo \\\"npm run build: not defined\\\"\",\r\n        \"postversion\" : \"git push && git push --tags\"\r\n      },\r\n      bin             : templateVars.bin,\r\n      license         : templateVars.license,\r\n      description     : templateVars.description,\r\n      keywords        : templateVars.keywords.split(/\\s/)\r\n    };\r\n  }))\r\n\r\n  // git init, add, commit\r\n  .pipe(spawn('git', ['init']))\r\n  .pipe(spawn('git', function (){\r\n    return ['add'].concat(files)\r\n  }))\r\n  .pipe(spawn('git', ['commit', '-m', 'npi:'+pkg.version]))\r\n```\r\n\r\n## About the code\r\n\r\nTLDR: It use a main stream `npi` on which transforms are piped to.\r\n\r\nThey execute in sequence, time management is totally left to the underlying pipe system.\r\n\r\nTo communicate with the user along the commands, `npi` will bubble events to the `source` stream.\r\n\r\n`msgListener` a dedicated stream is setup to listen `npi` stream  `message event`s.\r\n\r\nIt then route chunks to specific transforms which are responsible to display an output given the type of message.\r\n\r\nThe type of events you may encounter are\r\n\r\nWhen a file is created : `{message: 'file', body:'path'}`\r\n\r\nWhen a process spawns : `{message: 'spawn', body:child_process}`\r\n\r\nWhen a process has spawned (child_process.close event) : `{message: 'spawned', body:child_process}`\r\n\r\n\r\nMay this drawing you to jump in the code,\r\n\r\n```js\r\n       process\r\n-▶-stdin-▶|                       (1)\r\n          | var npi = stream()    /\r\n          |    .pipe() ▼         /\r\n          |       route 'npi' -----▼\r\n          |                        |\r\n          |      (3)               |\r\n          |      /                 |\r\n          |  npi emit()◀--|        |\r\n          |   ▼           |        |\r\n          |  down         |        |\r\n          |   ▼           ▲        |\r\n          |   |    bubble()◀◀|     |-▶fnT1 (spawn npm)\r\n          |   |              |           ▼ push()      (2)\r\n          |   |              ▲           ▼            /\r\n          |   |       bubble()◀◀|     fnT2 start bubble() ▶-|\r\n          |   |                 |        ▼                  |\r\n          |   |                 |        ▼  {type: 'file'   |\r\n          |   |                 |------------body: 'index'}-|\r\n          |   |                          ▼ push()\r\n          |   |                       fnT3 (inquire)\r\n          |   |                          ▼ push()\r\n          |   |                       fnT4 (git commit)\r\n          |   |                          ▼ push()\r\n          |   |          (4)          (end of npi)\r\n          |   |            \\\r\n          |   ▶-▶ var msgListener = eventStream('message', npi);\r\n          |         .pipe() ▼\r\n          |            route 'file' -▼\r\n          |                          |-▶fnT1 (extract body)  (5)\r\n          |                                 ▼ push()        /\r\n          |                             fnT2 (log to console)\r\n          |                                 ▼ push()\r\n          |                             (end of msgListener)\r\n          |     msgListener\r\n          |         .pipe() ▼                            (5 bis)\r\n          |            route 'spawn' -▼                 /\r\n          |                           |-▶fnT1 (pipe to process)\r\n          |                                 ▼ push()\r\n          |                              (end of msgListener)\r\n◀-stdout-◀|\r\n   (end of process)\r\n```\r\n\r\n\r\n## Read more\r\n\r\n- https://github.com/maboiteaspam/stream-messenger\r\n- https://github.com/maboiteaspam/stream-message-router\r\n- https://github.com/maboiteaspam/flower\r\n- https://github.com/maboiteaspam/bubbler\r\n- https://github.com/maboiteaspam/bubbled\r\n- https://github.com/maboiteaspam/event-stream-writer\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}